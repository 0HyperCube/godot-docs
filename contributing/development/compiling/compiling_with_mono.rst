.. _doc_compiling_with_mono:

Compiling with Mono
===================

.. highlight:: shell

Requirements
------------

- .NET SDK 6.0 or greater (generally 64 bit)

You can use ``dotnet --version`` to check your .NET version.

Enable the Mono module
----------------------

By default, the Mono module is disabled when building. To enable it, add the
option ``module_mono_enabled=yes`` to the SCons command line, while otherwise
following the instructions for building the desired Godot binaries.

Generate the glue
-----------------

Parts of the sources of the managed libraries are generated from the ClassDB.
These source files must be generated before building the managed libraries.
They can be generated by any mono-enabled Godot editor binary by running it with
the parameters ``--headless --generate-mono-glue`` followed by the path to an
output directory.
This path must be ``modules/mono/glue`` in the Godot directory::

    <godot_binary> --headless --generate-mono-glue modules/mono/glue

This command will tell Godot to generate the C# bindings for the Godot API at
``modules/mono/glue/GodotSharp/GodotSharp/Generated``, and the C# bindings for
the editor tools at ``modules/mono/glue/GodotSharp/GodotSharpEditor/Generated``.
Once these files are generated, you can build Godot's managed libraries for all
the desired targets without having to repeat this process.

``<godot_binary>`` refers to the editor binary you compiled with the Mono module
enabled. Its exact name will differ based on your system and configuration, but
should be of the form ``bin/godot.<platform>.editor.<arch>.mono``, e.g.
``bin/godot.linuxbsd.editor.x86_64.mono`` or 
``bin/godot.windows.editor.x86_32.mono.exe``. Be especially aware of the
**.mono** suffix! If you've previously compiled Godot without Mono support, you
might have similarly named binaries without this suffix. These binaries can't be
used to generate the Mono glue.

.. note:: The glue sources must be regenerated every time the ClassDB-registered
          API changes. That is, for example, when a new method is registered to
          the scripting API or one of the parameters of such a method changes.
          Godot will print an error at startup if there is an API mismatch
          between ClassDB and the glue sources.

Building the managed libraries
------------------------------

Once you have generated the Mono glue, you can builds the managed libraries with
the ``build_assemblies.py`` script.::

    ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin

If everything went well, the ``GodotSharp`` directory, containing the managed
libraries, should have been created in the in the ``bin`` directory.

.. note:: Due to NuGet package caching, rebuilding the managed libraries does
          not reliably update all projects using them. To solve this issue
          either use ``GODOT_VERSION_STATUS`` to give every build a unique
          version or delete ``GodotNuGetFallbackFolder`` to clear the package
          cache.

Unlike "classical" Godot builds, when building with the Mono module enabled
(and depending on the target platform), a data directory may be created both
for the editor and for exported projects. This directory is important for
proper functioning and must be distributed together with Godot.
More details about this directory in
:ref:`Data directory<compiling_with_mono_data_directory>`.

Examples
--------

Example (Windows)
^^^^^^^^^^^^^^^^^

::

    # Build editor binary
    scons p=windows target=editor module_mono_enabled=yes
    # Build export templates
    scons p=windows target=template_debug module_mono_enabled=yes
    scons p=windows target=template_release module_mono_enabled=yes
    
    # Generate glue sources
    bin/godot.windows.editor.x86_64.mono --generate-mono-glue modules/mono/glue
    # Build .NET assemblies
    ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows


Example (Linux, \*BSD)
^^^^^^^^^^^^^^^^^^^^^^

::

    # Build editor binary
    scons p=linuxbsd target=editor module_mono_enabled=yes
    # Build export templates
    scons p=linuxbsd target=template_debug module_mono_enabled=yes
    scons p=linuxbsd target=template_release module_mono_enabled=yes

    # Generate glue sources
    bin/godot.linuxbsd.editor.x86_64.mono --generate-mono-glue modules/mono/glue
    # Generate binaries
    ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd

.. _compiling_with_mono_data_directory:

Data directory
--------------

The data directory is a dependency for Godot binaries built with the Mono module
enabled. It contains important files for the correct functioning of Godot. It
must be distributed together with the Godot executable.

Editor
^^^^^^

The name of the data directory for the Godot editor will always be
``GodotSharp``. This directory contains an ``Api`` subdirectory with the Godot
API assemblies and a ``Tools`` subdirectory with the tools required by the
editor, like the ``GodotTools`` assemblies and its dependencies.

On macOS, if the Godot editor is distributed as a bundle, ``GodotSharp``
directory may be placed in the ``<bundle_name>.app/Contents/Resources/``
directory inside the bundle.

Export templates
^^^^^^^^^^^^^^^^

The data directory for exported projects is generated by the editor during the
export. It is named ``data_<APPNAME>_<ARCH>``, where ``<APPNAME>`` is the
application name as specified in the project setting ``application/config/name``
and ``<ARCH>`` is the current architecture of the export.

In the case of multi-architecture exports multiple such data directories will be
generated.

Command-line options
--------------------

The following is the list of command-line options available when building with
the Mono module:

- **module_mono_enabled**\ =yes | **no**

  - Build Godot with the Mono module enabled.
